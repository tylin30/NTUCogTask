#每一個set size要有自己的ACC, RT
#用土炮法
#min(ma_dt$SetSize) : max(ma_dt$SetSize)
(MA_indiv <- ma_dt %>%
filter(Block != 0) %>%
group_by(Subject) %>%
summarise(
RT_all = mean(RT[Accuracy == 1]),
ACC_all = mean(Accuracy),
ACC_1 = mean(Accuracy[SetSize == 1]),
ACC_2 = mean(Accuracy[SetSize == 2]),
ACC_3 = mean(Accuracy[SetSize == 3]),
ACC_4 = mean(Accuracy[SetSize == 4]),
ACC_5 = mean(Accuracy[SetSize == 5]),
ACC_6 = mean(Accuracy[SetSize == 6]),
ACC_7 = mean(Accuracy[SetSize == 7]),
Span = unique(yourSPAN),
Gender = unique(Gender),
Age = unique(Age),
Education = unique(Education),
Hand = unique(Hand),
Seed = unique(Seed)
))
((
MA_indiv2 <- ma_dt %>%
filter(Block != 0, Accuracy == 1) %>%
group_by(Subject) %>%
summarise(
RT_1 = mean(RT[SetSize == 1]),
RT_2 = mean(RT[SetSize == 2]),
RT_3 = mean(RT[SetSize == 3]),
RT_4 = mean(RT[SetSize == 4]),
RT_5 = mean(RT[SetSize == 5]),
RT_6 = mean(RT[SetSize == 6]),
RT_7 = mean(RT[SetSize == 7])
)
))
MA_indiv <- left_join(MA_indiv, MA_indiv2)
#reorder cols
MA_indiv <- MA_indiv[c("Subject", "RT_all", "ACC_all", "RT_1", "RT_2", "RT_3", "RT_4"
,"RT_5", "RT_6", "RT_7", "ACC_1", "ACC_2", "ACC_3", "ACC_4"
,"ACC_5", "ACC_6", "ACC_7", "Span", "Gender", "Age", "Education"
,"Hand", "Seed")]
tmp <- names(MA_indiv)
newcolnames <- lapply(tmp, function(x){
if(x != "Subject"){
paste0("MA_",x)
}else if (x == "Subject"){
paste0("",x)
}
})
names(MA_indiv) <- newcolnames
resave(MA_indiv, file = "cleanData.RData")
resave(MA_indiv, list = character(), file = "cleanData.RData")
library(tidyverse)
tidyverse_update()
#go to the raw data folder
SRTCRTfolder_path <- "./Raw_Data/SRT_CRT"
files <- dir(path = SRTCRTfolder_path, pattern = "*.csv")
#setwd(folder_path)
srtcrt_dt <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(SRTCRTfolder_path, file = .))) %>%
# remove Task unfinished
.[lapply(., colnames) != "Task unfinished!"] %>%
reduce(rbind)
#see cols class
sapply(srtcrt_dt, class)
#see df structure
str(srtcrt_dt)
#transform df class
srtcrt_dt = transform(srtcrt_dt,
Subject = as.factor(Subject),
Gender = as.factor(Gender),
Age = as.numeric(Age),
Education = as.factor(Education),
Hand = as.factor(Hand),
Seed = as.factor(Seed),
Block = as.factor(Block),
Trial = as.factor(Trial),
StimulusLocation = as.factor(StimulusLocation),
ResponseLocation = as.factor(ResponseLocation),
Accuracy = as.numeric(Accuracy),
RT = as.numeric(RT),
SRT = as.numeric(SRT),
CRT = as.numeric(CRT)
)
(SRT_CRT_indiv <- srtcrt_dt %>%
filter(Block != 0, Accuracy == 1 ) %>%
group_by(Subject) %>%
summarise(
SRTmean = mean(SRT),
CRTmean = mean(CRT),
Gender = unique(Gender),
Age = unique(Age),
Education = unique(Education),
Hand = unique(Hand),
Seed = unique(Seed)
))
save(SRT_CRT_indiv, file = "SRT_CRT.RData")
library(tidyverse)
tidyverse_update()
#go to the raw data folder
folder_path <- "./Raw_Data/MA"
files <- dir(path = folder_path, pattern = "*.csv")
#setwd(folder_path)
ma_dt <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(folder_path, .))) %>%
.[lapply(., colnames) != "Task unfinished!"] %>%
reduce(rbind)
#see cols class
sapply(ma_dt, class)
#see df structure
str(ma_dt)
#transform df class
ma_dt = transform(ma_dt,
Subject = as.factor(Subject),
Gender = as.factor(Gender),
Age = as.numeric(Age),
Education = as.factor(Education),
Hand = as.factor(Hand),
Seed = as.factor(Seed),
Block = as.factor(Block),
Trial = as.factor(Trial),
SetSize = as.numeric(SetSize),
Stimuli = as.factor(Stimuli),
CorrLocInOrder = as.factor(CorrLocInOrder),
TouchedLoc = as.factor(TouchedLoc),
Accuracy = as.numeric(Accuracy),
RT = as.numeric(RT),
yourSPAN = as.numeric(yourSPAN)
)
#每一個set size要有自己的ACC, RT
#用土炮法
#min(ma_dt$SetSize) : max(ma_dt$SetSize)
(MA_indiv <- ma_dt %>%
filter(Block != 0) %>%
group_by(Subject) %>%
summarise(
RT_all = mean(RT[Accuracy == 1]),
ACC_all = mean(Accuracy),
ACC_1 = mean(Accuracy[SetSize == 1]),
ACC_2 = mean(Accuracy[SetSize == 2]),
ACC_3 = mean(Accuracy[SetSize == 3]),
ACC_4 = mean(Accuracy[SetSize == 4]),
ACC_5 = mean(Accuracy[SetSize == 5]),
ACC_6 = mean(Accuracy[SetSize == 6]),
ACC_7 = mean(Accuracy[SetSize == 7]),
Span = unique(yourSPAN),
Gender = unique(Gender),
Age = unique(Age),
Education = unique(Education),
Hand = unique(Hand),
Seed = unique(Seed)
))
((
MA_indiv2 <- ma_dt %>%
filter(Block != 0, Accuracy == 1) %>%
group_by(Subject) %>%
summarise(
RT_1 = mean(RT[SetSize == 1]),
RT_2 = mean(RT[SetSize == 2]),
RT_3 = mean(RT[SetSize == 3]),
RT_4 = mean(RT[SetSize == 4]),
RT_5 = mean(RT[SetSize == 5]),
RT_6 = mean(RT[SetSize == 6]),
RT_7 = mean(RT[SetSize == 7])
)
))
MA_indiv <- left_join(MA_indiv, MA_indiv2)
#reorder cols
MA_indiv <- MA_indiv[c("Subject", "RT_all", "ACC_all", "RT_1", "RT_2", "RT_3", "RT_4"
,"RT_5", "RT_6", "RT_7", "ACC_1", "ACC_2", "ACC_3", "ACC_4"
,"ACC_5", "ACC_6", "ACC_7", "Span", "Gender", "Age", "Education"
,"Hand", "Seed")]
tmp <- names(MA_indiv)
newcolnames <- lapply(tmp, function(x){
if(x != "Subject"){
paste0("MA_",x)
}else if (x == "Subject"){
paste0("",x)
}
})
names(MA_indiv) <- newcolnames
save(MA_indiv, file = "MA.RData")
# ma_dt %>% filter(Block != 0 , Accuracy == 1, SetSize == 2) %>%
#     group_by(Subject) %>%
#     summarise(RT_2 = mean(RT))
rm(list=ls()) #clear environment
load("SRT_CRT.RData")
load("MA.RData")
library(tidyverse)
tidyverse_update()
#go to the raw data folder
folder_path <- "./Raw_Data/MA"
files <- dir(path = folder_path, pattern = "*.csv")
#setwd(folder_path)
ma_dt <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(folder_path, .))) %>%
.[lapply(., colnames) != "Task unfinished!"] %>%
reduce(rbind)
#see cols class
sapply(ma_dt, class)
#see df structure
str(ma_dt)
#transform df class
ma_dt = transform(ma_dt,
Subject = as.factor(Subject),
Gender = as.factor(Gender),
Age = as.numeric(Age),
Education = as.factor(Education),
Hand = as.factor(Hand),
Seed = as.factor(Seed),
Block = as.factor(Block),
Trial = as.factor(Trial),
SetSize = as.numeric(SetSize),
Stimuli = as.factor(Stimuli),
CorrLocInOrder = as.factor(CorrLocInOrder),
TouchedLoc = as.factor(TouchedLoc),
Accuracy = as.numeric(Accuracy),
RT = as.numeric(RT),
yourSPAN = as.numeric(yourSPAN)
)
#每一個set size要有自己的ACC, RT
#用土炮法
#min(ma_dt$SetSize) : max(ma_dt$SetSize)
(MA_indiv <- ma_dt %>%
filter(Block != 0) %>%
group_by(Subject) %>%
summarise(
RT_all = mean(RT[Accuracy == 1]),
ACC_all = mean(Accuracy),
ACC_1 = mean(Accuracy[SetSize == 1]),
ACC_2 = mean(Accuracy[SetSize == 2]),
ACC_3 = mean(Accuracy[SetSize == 3]),
ACC_4 = mean(Accuracy[SetSize == 4]),
ACC_5 = mean(Accuracy[SetSize == 5]),
ACC_6 = mean(Accuracy[SetSize == 6]),
ACC_7 = mean(Accuracy[SetSize == 7]),
Span = unique(yourSPAN),
Gender = unique(Gender),
Age = unique(Age),
Education = unique(Education),
Hand = unique(Hand),
Seed = unique(Seed)
))
((
MA_indiv2 <- ma_dt %>%
filter(Block != 0, Accuracy == 1) %>%
group_by(Subject) %>%
summarise(
RT_1 = mean(RT[SetSize == 1]),
RT_2 = mean(RT[SetSize == 2]),
RT_3 = mean(RT[SetSize == 3]),
RT_4 = mean(RT[SetSize == 4]),
RT_5 = mean(RT[SetSize == 5]),
RT_6 = mean(RT[SetSize == 6]),
RT_7 = mean(RT[SetSize == 7])
)
))
MA_indiv <- left_join(MA_indiv, MA_indiv2)
#reorder cols
MA_indiv <- MA_indiv[c("Subject", "RT_all", "ACC_all", "RT_1", "RT_2", "RT_3", "RT_4"
,"RT_5", "RT_6", "RT_7", "ACC_1", "ACC_2", "ACC_3", "ACC_4"
,"ACC_5", "ACC_6", "ACC_7", "Span", "Gender", "Age", "Education"
,"Hand", "Seed")]
tmp <- names(MA_indiv)
newcolnames <- lapply(tmp, function(x){
if(x %in% c("Subject", "Gender", "Age", "Education", "Hand", "Seed") ){
paste0("",x)
}else{
paste0("MA_",x)
}
})
names(MA_indiv) <- newcolnames
save(MA_indiv, file = "MA.RData")
# ma_dt %>% filter(Block != 0 , Accuracy == 1, SetSize == 2) %>%
#     group_by(Subject) %>%
#     summarise(RT_2 = mean(RT))
rm(list=ls()) #clear environment
load("SRT_CRT.RData")
load("MA.RData")
allTasks <- full_join("MA_indiv", "SRT_CRT_indiv", by="Subject")
allTasks <- full_join("MA_indiv", "SRT_CRT_indiv")
full_join("MA_indiv", "SRT_CRT_indiv")
MA_indiv
full_join("MA_indiv", "SRT_CRT_indiv")
left_join("MA_indiv", "SRT_CRT_indiv")
```
left_join("MA_indiv", "SRT_CRT_indiv")
allTasks <- full_join(MA_indiv, SRT_CRT_indiv)
View(allTasks)
test <- {"1":"test", "2":"test"}
rm(list = ls())
#go to the raw data folder
folder_path <- "./Raw_Data/HF"
files <- dir(path = folder_path, pattern = "*.csv")
#setwd(folder_path)
#read_csv可以處理col_types (don't know if it's suitable in this case)
hf_dt <- files %>%
# read in all the files, appending the path before the filename
map(~ read_csv(file.path(folder_path, file = .))) %>%
# remove Task unfinished
.[lapply(., colnames) != "Task unfinished!"] %>%
reduce(rbind)
#see cols class
sapply(hf_dt, class)
#see df structure
str(hf_dt)
#also try `type_convert`
#transform df class
hf_dt = transform(hf_dt,
Subject = as.factor(Subject),
Gender = as.factor(Gender),
Age = as.numeric(Age),
Education = as.factor(Education),
Hand = as.factor(Hand),
Seed = as.factor(Seed),
Block = as.factor(Block),
Trial = as.factor(Trial),
StimulusLocation = as.factor(StimulusLocation),
SubjectResponse = as.factor(SubjectResponse),
Accuracy = as.numeric(Accuracy),
RT = as.numeric(RT),
heartACC = as.numeric(heartACC),
heartRT = as.numeric(heartRT),
flowerACC = as.numeric(flowerACC),
flowerRT = as.numeric(flowerRT),
BlockACC = as.numeric(BlockACC),
BlockRT = as.numeric(BlockRT)
)
(HF_indiv <- hf_dt %>%
filter(Block != 0) %>%
group_by(Subject) %>%
summarise(
RT = mean(RT[Accuracy == 1]),
heartACC = unique(heartACC),
heartRT = unique(heartRT),
flowerACC = unique(flowerACC),
flowerRT = unique(flowerRT),
# BlockACC = unique(BlockACC),
# BlockRT = unique(BlockRT),
Block1ACC = unique(BlockACC[Block == 1]),
Block1RT = unique(BlockRT[Block == 1 && Accuracy == 1]),
Block2ACC = unique(BlockACC[Block == 2]),
Block2RT = unique(BlockRT[Block == 2]),
Block3ACC = unique(BlockACC[Block == 3]),
Block3RT = unique(BlockRT[Block == 3]),
Accuracy = mean(Accuracy),
Gender = unique(Gender),
Hand = unique(Hand)
)
)
(HF_indiv <- hf_dt %>%
filter(Block != 0) %>%
group_by(Subject) %>%
summarise(
RT = mean(RT[Accuracy == 1]),
heartACC = unique(heartACC),
heartRT = unique(heartRT),
flowerACC = unique(flowerACC),
flowerRT = unique(flowerRT),
# BlockACC = unique(BlockACC),
# BlockRT = unique(BlockRT),
Block1ACC = unique(BlockACC[Block == 1]),
Block1RT = unique(BlockRT[Block == 1]),
Block2ACC = unique(BlockACC[Block == 2]),
Block2RT = unique(BlockRT[Block == 2]),
Block3ACC = unique(BlockACC[Block == 3]),
Block3RT = unique(BlockRT[Block == 3]),
Accuracy = mean(Accuracy),
Gender = unique(Gender),
Hand = unique(Hand)
)
)
#每一個set size要有自己的ACC, RT
#用土炮法
#min(ma_dt$SetSize) : max(ma_dt$SetSize)
(MA_indiv <- ma_dt %>%
filter(Block != 0) %>%
group_by(Subject) %>%
summarise(
RT_all = mean(RT[Accuracy == 1]),
ACC_all = mean(Accuracy),
ACC_1 = mean(Accuracy[SetSize == 1]),
ACC_2 = mean(Accuracy[SetSize == 2]),
ACC_3 = mean(Accuracy[SetSize == 3]),
ACC_4 = mean(Accuracy[SetSize == 4]),
ACC_5 = mean(Accuracy[SetSize == 5]),
ACC_6 = mean(Accuracy[SetSize == 6]),
ACC_7 = mean(Accuracy[SetSize == 7]),
Span = unique(yourSPAN),
Gender = unique(Gender),
Age = unique(Age),
Education = unique(Education),
Hand = unique(Hand),
Seed = unique(Seed)
))
(HF_indiv <- hf_dt %>%
filter(Block != 0) %>%
group_by(Subject) %>%
summarise(
RT = mean(RT[Accuracy == 1]),
heartACC = unique(heartACC),
heartRT = unique(heartRT),
flowerACC = unique(flowerACC),
flowerRT = unique(flowerRT),
# BlockACC = unique(BlockACC),
# BlockRT = unique(BlockRT),
Block1ACC = unique(BlockACC[Block == 1]),
Block2ACC = unique(BlockACC[Block == 2]),
Block3ACC = unique(BlockACC[Block == 3]),
Accuracy = mean(Accuracy),
Gender = unique(Gender),
Hand = unique(Hand)
)
)
((
HF_indiv2 <- hf_dt %>%
filter(Block != 0, Accuracy == 1) %>%
group_by(Subject) %>%
summarise(
Block1RT = unique(BlockRT[Block == 1]),
Block2RT = unique(BlockRT[Block == 2]),
Block3RT = unique(BlockRT[Block == 3]),
)
))
HF_indiv <- full_join(HF_indiv, HF_indiv2)
# #reorder cols
# MA_indiv <- MA_indiv[c("Subject", "RT_all", "ACC_all", "RT_1", "RT_2", "RT_3", "RT_4"
#                        ,"RT_5", "RT_6", "RT_7", "ACC_1", "ACC_2", "ACC_3", "ACC_4"
#                        ,"ACC_5", "ACC_6", "ACC_7", "Span", "Gender", "Age", "Education"
#                        ,"Hand", "Seed")]
colnames(HF_indiv)
(HF_indiv <- hf_dt %>%
filter(Block != 0) %>%
group_by(Subject) %>%
summarise(
RT = mean(RT[Accuracy == 1]),
heartACC = unique(heartACC),
heartRT = unique(heartRT),
flowerACC = unique(flowerACC),
flowerRT = unique(flowerRT),
# BlockACC = unique(BlockACC),
# BlockRT = unique(BlockRT),
Block1ACC = unique(BlockACC[Block == 1]),
Block2ACC = unique(BlockACC[Block == 2]),
Block3ACC = unique(BlockACC[Block == 3]),
Accuracy = mean(Accuracy),
Gender = unique(Gender),
Age = unique(Age),
Education = unique(Education),
Hand = unique(Hand),
Seed = unique(Seed)
)
)
((
HF_indiv2 <- hf_dt %>%
filter(Block != 0, Accuracy == 1) %>%
group_by(Subject) %>%
summarise(
Block1RT = unique(BlockRT[Block == 1]),
Block2RT = unique(BlockRT[Block == 2]),
Block3RT = unique(BlockRT[Block == 3]),
)
))
HF_indiv <- full_join(HF_indiv, HF_indiv2)
# #reorder cols
HF_indiv <- HF_indiv[c("Subject", "Accuracy" ,"RT", "heartACC", "heartRT"
, "flowerACC", "flowerRT"
, "Block1ACC", "Block1RT","Block2ACC", "Block2RT"
, "Block3ACC","Block3RT"
, "Gender", "Age", "Education"
, "Hand", "Seed")]
colnames(HF_indiv)
colnames(hf_dt)[!(colnames(hf_dt) %in% colnames(HF_indiv))]
tmp <- names(HF_indiv)
newcolnames <- lapply(tmp, function(x){
if(x %in% c("Subject", "Gender", "Age", "Education", "Hand", "Seed") ){
paste0("",x)
}else{
paste0("HF_",x)
}
})
names(HF_indiv) <- newcolnames
save(HF_indiv, file = "HF.RData")
rm(list=ls()) #clear environment
load("SRT_CRT.RData")
load("MA.RData")
load("HF.RData")
allTasks <- full_join(MA_indiv, SRT_CRT_indiv, HF_indiv)
allTasks <- full_join(MA_indiv, SRT_CRT_indiv)
rm(list=ls()) #clear environment
load("SRT_CRT.RData")
load("MA.RData")
load("HF.RData")
# allTasks <- full_join()
allTasks <- join_all(list(MA_indiv, SRT_CRT_indiv, HF_indiv), type='full')
library(tidyverse)
tidyverse_update()
library(plyr)
rm(list=ls()) #clear environment
load("SRT_CRT.RData")
load("MA.RData")
load("HF.RData")
# allTasks <- full_join()
allTasks <- join_all(list(MA_indiv, SRT_CRT_indiv, HF_indiv), type='full')
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("tylin30/NTUCogTask")
library(NTUCogTask)
